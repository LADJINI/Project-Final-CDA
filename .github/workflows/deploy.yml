name: Deploy Dockerized Application

on:
  push:
    branches:
      - main  # Remplacez par la branche que vous utilisez, comme 'main' ou 'master'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3309:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: Bookspot
        options: --health-cmd="mysqladmin ping --silent" --health-timeout=30s --health-retries=3 --health-start-period=10s

      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: --health-cmd="mongo --eval 'db.adminCommand('ping')' --quiet" --health-timeout=30s --health-retries=3 --health-start-period=10s

    steps:
      # Étape 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2 : Installer Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Build de l'image Docker du backend
      - name: Build backend Docker image
        run: |
          docker build -t backend-image ./Backend-BookSpot

      # Étape 4 : Build de l'image Docker du frontend
      - name: Build frontend Docker image
        run: |
          docker build -t frontend-image ./Frontend-BookSpot

      # Étape 5 : Lancer les services Docker avec docker-compose
      - name: Start Docker containers
        run: |
          docker network create bookspot-network || true
          docker-compose -f docker-compose.yml up -d

      # Étape 6 : Test pour vérifier que les services sont bien démarrés
      - name: Check backend service
        run: |
          curl --retry 5 --retry-delay 10 --max-time 30 http://localhost:8086/health

      - name: Check frontend service
        run: |
          curl --retry 5 --retry-delay 10 --max-time 30 http://localhost:5173
          
      # Étape 7 : Nettoyage des containers (optionnel)
      - name: Clean up Docker containers
        run: |
          docker-compose down
